import { async } from '@angular/core/testing';
import { Observable, of as observableOf, throwError } from 'rxjs';

import { ExampleKlass } from './example.klass';
describe('ExampleKlass', () => {
  let obj;

  beforeEach(() => {
    obj = new ExampleKlass();
  });

  it('should run GetterDeclaration #username', async () => {
    obj.userInfo = obj.userInfo || {};
    obj.userInfo.userId = 'userId';
    obj.userInfo.firstName = 'firstName';
    obj.userInfo.lastName = 'lastName';
    const username = obj.username;

  });

  it('should run #connectedCallback()', async () => {
    spyOn(obj, 'closest').and.returnValue({
      pppUuuu: {},
      i18n: {
        userInfo: {}
      },
      userInfo: {}
    });
    spyOn(obj, 'renderWith').and.returnValue({
      then: function() {
        return [
          null
        ];
      }
    });
    spyOn(obj, 'render');
    spyOn(obj, 'attachListeners');
    obj.connectedCallback();
    // expect(obj.closest).toHaveBeenCalled();
    // expect(obj.renderWith).toHaveBeenCalled();
    // expect(obj.render).toHaveBeenCalled();
    // expect(obj.attachListeners).toHaveBeenCalled();
  });

  it('should run #setUserCode()', async () => {
    spyOn(obj, 'querySelectorAll');
    spyOn(obj, 'querySelector').and.returnValue({
      innerHTML: {}
    });
    obj.setUserCode({});
    // expect(obj.querySelectorAll).toHaveBeenCalled();
    // expect(obj.querySelector).toHaveBeenCalled();
  });

  it('should run #attachListeners()', async () => {
    spyOn(obj, 'querySelector').and.returnValue({
      setAttribute: function() {},
      classList: {
        add: function() {}
      },
      removeAttribute: function() {}
    });
    obj.attachListeners();
    // expect(obj.querySelector).toHaveBeenCalled();
  });

});
